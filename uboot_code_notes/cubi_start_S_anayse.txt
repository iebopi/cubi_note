====================================================================================
//arm-v7 start.s分析--> http://blog.csdn.net/skyflying2012/article/details/25804209
//***使用Notpad查看***
====================================================================================
 -------
|start.S|
 -------

//1、_start入口、异常向量表
-------------------------
.global _start
_start: b	reset
	ldr	pc, _undefined_instruction
	ldr	pc, _software_interrupt
	ldr	pc, _prefecth_abort
	ldr	pc, _data_abort
	ldr	pc, _not_used
	ldr	pc, _irq
	ldr	pc, _fiq

_undefine_instruction:	.word undefined_instruction
...


//相关变量
-----------
.global _end_vect
_end_vect:
	balignl 16,0xdeadbeef	@（接下来的代码16字节对齐，空缺用0xdeadbeef补全）

.global _TEXT_BASE	(CONFIG_SYS_TEXT_BASE)

.global _bss_start_ofs	(__bss_start - _start)
.global _bss_end_ofs	(__bss_end - _start)
.global _end_ofs	(_end - _start)

.global IRQ_STACK_START (0x0badc0de)
.global FIQ_STACK_START (0x0badc0de)
.global IRQ_STACK_START_IN (0x0badc0de)


//复位
-------
reset:
	bl save_boot_params 	@//（空函数 .weak）


//2、关中断（FIQ/IRQ，设置cpu为svc32模式(CPSR)
-----------------------------------------------
	mrs r0, cpsr
	and	r1, r0, #0x1f		@// mask mode bits
	teq	r1, #0x1a			@// test for HYP mode
	bicne	r0, r0, #0x1f	@// clear all mode bits
	orrne	r0, r0, #0x13	@// set SVC mode
	orr	r0, r0, #0xc0		@// disable FIQ and IRQ
	msr	cpsr,r0


//3、设置CP15协处理器
----------------------
/*
 * Setup vector:
 * (OMAP4 spl TEXT_BASE is not 32 byte aligned.
 * Continue to use ROM code vector only in OMAP4 spl)
 */
#if !(defined(CONFIG_OMAP44XX) && defined(CONFIG_SPL_BUILD))
	/* Set V=0 in CP15 SCTRL register - for VBAR to point to vector */
	mrc	p15, 0, r0, c1, c0, 0
	bic	r0, #CR_V		@// V = 0
	mcr	p15, 0, r0, c1, c0, 0

	/* Set vector address in CP15 VBAR register */
	ldr	r0, =_start
	mcr	p15, 0, r0, c12, c0, 0	//Set VBAR
#endif


//4、设置CP15协处理器，板级初始化
---------------------------------------------------------------------------
//CP15-->http://blog.csdn.net/skyflying2012/article/details/25823967
---------------------------------------------------------------------------
	/* the mask ROM code should have PLL and others stable */
#ifndef CONFIG_SKIP_LOWLEVEL_INIT
	bl	cpu_init_cp15	@//（设置CP15，初始化mmu cache tlb）
	bl	cpu_init_crit	@//（板级初始化，pll memory初始化）
#endif

//5、跳转至main（arch/arm/lib/crt0.S）
--------------------------------------
	bl	_main
	
	//5.1 栈指针初始化
	ENTRY(_main)
	
	//Set up initial C runtime environment and call board_init_f(0).
	//CONFIG_SPL_BUILD未定义
	
	#if defined(CONFIG_SPL_BUILD) && defined(CONFIG_SPL_STACK)
		ldr	sp, =(CONFIG_SPL_STACK)
	#else
		ldr	sp, =(CONFIG_SYS_INIT_SP_ADDR)
	#endif
		bic	sp, sp, #7	/* 8-byte alignment for ABI compliance */
		sub	sp, #GD_SIZE	/* allocate one GD above SP */
		bic	sp, sp, #7	/* 8-byte alignment for ABI compliance */
		mov	r8, sp		/* GD is above SP */
		mov	r0, #0
		bl	board_init_f
		
	//5.2 跳转至board_init_f（arch/arm/lib/board.c）
		
	
========================================
//ENTRY
ENTRY(c_runtime_cpu_setup)
	...
ENDPROC(c_runtime_cpu_setup)

//ENTRY
ENTRY(save_boot_params)
	bx	lr			@//相当于 mov  pc,lr （子程序返回或从异常返回）
ENDPROC(save_boot_params)
	.weak	save_boot_params

//ENTRY
ENTRY(cpu_init_cp15)
	...
ENDPROC(cpu_init_cp15)

//ENTRY
#ifndef CONFIG_SKIP_LOWLEVEL_INIT
ENTRY(cpu_init_crit)
	b	lowlevel_init		@ //go setup pll,mux,memory
ENDPROC(cpu_init_crit)
#endif


==========================================
//宏定义 .macro
.macro	bad_save_user_regs
	...
.endm

.macro	irq_save_user_regs
.endm

.macro	irq_restore_user_regs
	...
.endm

.macro get_bad_stack
	...
.endm

.macro get_bad_stack_swi
	...
.endm

.macro get_irq_stack
	...
.endm

.macro get_fiq_stack
.endm

===========================================
//异常向量处理
/*
 * exception handlers
 */
	.align	5
undefined_instruction:
	get_bad_stack
	bad_save_user_regs
	bl	do_undefined_instruction

	.align	5
software_interrupt:
...
